plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.181'
    id "me.shedaniel.unified-publishing" version "${publishing_version}"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "curse.maven:ccore-573646:${project.ccore_file_id}"
    runtimeOnly "curse.maven:jei-238222:${project.jei_file_id}"
    runtimeOnly "curse.maven:sodium-394468:${project.sodium_file_id}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

unifiedPublishing {
    project {
        displayName = "${mod_name} v${mod_version} [NeoForge ${minecraft_version}]"
        releaseType = "${mod_release_type}"
        if (rootProject.file("changelog.txt").exists()) {
            changelog = rootProject.file("changelog.txt").text
        }
        gameVersions = ["${minecraft_version}", "1.21"]
        gameLoaders = ["neoforge"]
        mainPublication jar

        var CURSE_API_KEY = project.findProperty('curseforge_apikey')
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = "${curseforge_project_id}"
                gameVersions.addAll "Java 21"
                relations {
                    depends "ccore"
                }
            }
        }

        var MODRINTH_API_KEY = project.findProperty('modrinth_apikey')
        if (MODRINTH_API_KEY != null) {
            modrinth {
                token = MODRINTH_API_KEY
                id = "${modrinth_project_id}"
                relations {
                    depends "ccore"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
